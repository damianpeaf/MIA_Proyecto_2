Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> COMMAND parameters
Rule 2     init -> COMMAND
Rule 3     init -> VALUE parameters
Rule 4     init -> VALUE
Rule 5     parameters -> parameters parameter
Rule 6     parameters -> parameter
Rule 7     parameter -> PARAM ARROW VALUE

Terminals, with rules where they appear

ARROW                : 7
COMMAND              : 1 2
PARAM                : 7
VALUE                : 3 4 7
error                : 

Nonterminals, with rules where they appear

init                 : 0
parameter            : 5 6
parameters           : 1 3 5

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . COMMAND parameters
    (2) init -> . COMMAND
    (3) init -> . VALUE parameters
    (4) init -> . VALUE

    COMMAND         shift and go to state 2
    VALUE           shift and go to state 3

    init                           shift and go to state 1

state 1

    (0) S' -> init .



state 2

    (1) init -> COMMAND . parameters
    (2) init -> COMMAND .
    (5) parameters -> . parameters parameter
    (6) parameters -> . parameter
    (7) parameter -> . PARAM ARROW VALUE

    $end            reduce using rule 2 (init -> COMMAND .)
    PARAM           shift and go to state 6

    parameters                     shift and go to state 4
    parameter                      shift and go to state 5

state 3

    (3) init -> VALUE . parameters
    (4) init -> VALUE .
    (5) parameters -> . parameters parameter
    (6) parameters -> . parameter
    (7) parameter -> . PARAM ARROW VALUE

    $end            reduce using rule 4 (init -> VALUE .)
    PARAM           shift and go to state 6

    parameters                     shift and go to state 7
    parameter                      shift and go to state 5

state 4

    (1) init -> COMMAND parameters .
    (5) parameters -> parameters . parameter
    (7) parameter -> . PARAM ARROW VALUE

    $end            reduce using rule 1 (init -> COMMAND parameters .)
    PARAM           shift and go to state 6

    parameter                      shift and go to state 8

state 5

    (6) parameters -> parameter .

    PARAM           reduce using rule 6 (parameters -> parameter .)
    $end            reduce using rule 6 (parameters -> parameter .)


state 6

    (7) parameter -> PARAM . ARROW VALUE

    ARROW           shift and go to state 9


state 7

    (3) init -> VALUE parameters .
    (5) parameters -> parameters . parameter
    (7) parameter -> . PARAM ARROW VALUE

    $end            reduce using rule 3 (init -> VALUE parameters .)
    PARAM           shift and go to state 6

    parameter                      shift and go to state 8

state 8

    (5) parameters -> parameters parameter .

    PARAM           reduce using rule 5 (parameters -> parameters parameter .)
    $end            reduce using rule 5 (parameters -> parameters parameter .)


state 9

    (7) parameter -> PARAM ARROW . VALUE

    VALUE           shift and go to state 10


state 10

    (7) parameter -> PARAM ARROW VALUE .

    PARAM           reduce using rule 7 (parameter -> PARAM ARROW VALUE .)
    $end            reduce using rule 7 (parameter -> PARAM ARROW VALUE .)

